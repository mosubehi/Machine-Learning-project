# -*- coding: utf-8 -*-
"""FinalProject4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Uj4i8dHyWHbVzsFZ-hHx0cK4urZWo34V
"""

#model prediction using Decision Tree Regression
from google.colab import drive 
drive.mount('/content/drive/')
import os 
path='/content/drive/My Drive/AI_Lab_144175'
os.chdir(path)

import pandas as pd
import numpy as np
disease=pd.read_csv("corona_virus.csv", encoding= 'unicode_escape')
disease.head()

#these columns don't have a lot of values 
columns_drop=['New Recovered','New Deaths','New Cases']
disease.drop(columns=columns_drop, axis=1, inplace=True)

disease.columns

disease.info() #there're numerical values with object data type

#Warning! In the column Tot Cases/1M pop there is an invisible symbol xA0. I used Notepad++ to copy the title

disease.rename(columns={'Tot\xa0Cases/1M pop': 'TotalCases/1MPOP'}, inplace=True)
disease.rename(columns={'Country,Other': 'Country'}, inplace=True)
#disease['Tot\xa0Cases/1M pop'] # in the moment when i found the solution by chance ^_^

disease.head() #there're numerical values with object data type 
#disease.columns

#Remove commas and cast all values to float

columns = ['Total Cases', 'Total Deaths', 'Total Recovered', 'Active Cases',
       'Serious,Critical', 'Deaths/1M pop', 'Total Tests',
       'Tests/1M pop', 'Population', 'TotalCases/1MPOP']
#columns list contains the columns that contain numerical values with commas and not float datatype
disease = disease.replace(to_replace =',', value = '', regex = True)
disease[columns] = disease[columns].astype(float)
disease.info()

# Handle duplicates
duplicate_rows_data = disease[disease.duplicated()]
print("number of duplicate rows: ", duplicate_rows_data.shape)
#drop duplicates
disease = disease.drop_duplicates()

#the number of unique values
for column in disease.columns:
    num_distinct_values = len(disease[column].unique())
    print(f"{column}: {num_distinct_values} distinct values")


# Checking null values
print(disease.isnull().sum())

#Categorical encoding (columns with non numerical data)
from sklearn.preprocessing import OrdinalEncoder
columns = ["Country"]
encoding = OrdinalEncoder()
disease[columns] = encoding.fit_transform(disease[columns])
disease.head()

disease = disease.fillna(0)#fill null rows with zeros
disease.head()
#code for fill missing values with the mean of the column
#for col in disease :
  #x=disease[col].mean()
  #disease[col].fillna(x,inplace=True)

disease.isnull().sum()

# Select the features and target variable
columns = ["Country", "Total Cases", "Total Deaths",
            "Total Recovered", "Active Cases", "Serious,Critical",
            "TotalCases/1MPOP", "Deaths/1M pop", "Tests/1M pop", "Population"]

from sklearn.model_selection import train_test_split

X=disease[columns]
y=disease["Total Tests"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

disease.shape

from sklearn.tree import DecisionTreeRegressor

# Initialize the Decision Tree regressor
tree = DecisionTreeRegressor()

# Fit the model to the training data
tree.fit(X_train, y_train)

# Predict on the test data
y_pred = tree.predict(X_test)

from sklearn.metrics import mean_squared_error
# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)